; MIT License
; Copyright (c) 2021 Kosaki Mezumona
#UseHook
#include "cmd.ahk2"
#include "window.ahk2"

class MacSimulator
{
	static Instance[args*]
	{
		get
		{
			static instance := MacSimulator()
			return instance
		}
	}

	Command[args*]
	{
		get => this._command
		set => this._command := value
	}

	IgnoredWindowMatcher[args*]
	{
		get => this._ignoredWindowMatcher
		set => this._ignoredWindowMatcher := value
	}

	__New()
	{
		this._commandKeyDown := false
		this._taskSwitching := false
		this._ignoredWindowMatcher := WindowMatcher()
	}

	RegisterKeybinds(commandKey)
	{
		HotIf((*) => this.IsAbleToOverrideKeys())

		HotKey("*" . commandKey, (*) => this.OnCommandKeyDown())
		HotKey("*" . commandKey . " Up", (*) => this.OnCommandKeyUp())
		HotKey("Tab", (*) => this.OnTabKeyDown())
		HotKey("*+vkDB", (*) => this.OnShiftOpenBracketDown())
		HotKey("*+vkDD", (*) => this.OnShiftCloseBracketDown())
		HotKey("*+vk33", (*) => this.OnShiftThreeDown())
		HotKey("*+vk34", (*) => this.OnShiftFourDown())
		HotKey("*+vk35", (*) => this.OnShiftFiveDown())
		HotKey("vk41", (*) => this.OnAKeyDown())
		HotKey("vk43", (*) => this.OnCKeyDown())
		HotKey("vk46", (*) => this.OnFKeyDown())
		HotKey("vk4E", (*) => this.OnNKeyDown())
		HotKey("vk4F", (*) => this.OnOKeyDown())
		HotKey("vk56", (*) => this.OnVKeyDown())
		HotKey("vk58", (*) => this.OnXKeyDown())
		HotKey("vk5A", (*) => this.OnZKeyDown())
		HotKey("vkE2", (*) => Send("_"))
		HotKey("<^Up", (*) => Send("{RWin Down}{Tab}{RWin Up}"))
		HotKey("<^Left", (*) => Send("{Blind}{RWin Down}{Left}{RWin Up}"))
		HotKey("<^Right", (*) => Send("{Blind}{RWin Down}{Right}{RWin Up}"))

		HotIf()
	}

	IsAbleToOverrideKeys() => !this._ignoredWindowMatcher.MatchActive()

	PressCommandKey() => Send("{Blind}{RCtrl Down}")
	ReleaseCommandKey() => Send("{Blind}{RCtrl Up}")

	OnCommandKeyDown()
	{
		this.PressCommandKey()
		if (!this._commandKeyDown)
		{
			this._commandKeyDown := true
		}
	}

	OnCommandKeyUp()
	{
		this.ReleaseCommandKey()
		Send("{Blind}{RAlt Up}")
		this._commandKeyDown := false
		this._taskSwitching := false
	}

	OnTabKeyDown()
	{
		if (this._commandKeyDown && !this._taskSwitching)
		{
			Send("{Blind}{RCtrl Up}{RAlt Down}")
			this._taskSwitching := true
		}
		Send("{Blind}{Tab}")
	}

	OnShiftOpenBracketDown()
	{
		if (this._commandKeyDown)
		{
			this._command.SwitchPrevTab()
		}
		else
		{
			Send("{Blind}{vkDB}")
		}
	}

	OnShiftCloseBracketDown()
	{
		if (this._commandKeyDown)
		{
			this._command.SwitchNextTab()
		}
		else
		{
			Send("{Blind}{vkDD}")
		}
	}

	OnShiftThreeDown()
	{
		if (this._commandKeyDown)
		{
			this._command.CaptureScreen()
		}
		else
		{
			Send("{Blind}{vk33}")
		}
	}

	OnShiftFourDown()
	{
		if (this._commandKeyDown)
		{
			this._command.CaptureActiveWindow()
		}
		else
		{
			Send("{Blind}{vk34}")
		}
	}

	OnShiftFiveDown()
	{
		if (this._commandKeyDown)
		{
			this._command.CaptureWithScreenshotTools()
		}
		else
		{
			Send("{Blind}{vk35}")
		}
	}

	OnAKeyDown()
	{
		if (this._commandKeyDown)
		{
			this.ReleaseCommandKey()
			this._command.SelectAll()
			this.PressCommandKey()
		}
		else
		{
			Send("{Blind}{vk41}")
		}
	}

	OnCKeyDown()
	{
		if (this._commandKeyDown)
		{
			this.ReleaseCommandKey()
			this._command.Copy()
			this.PressCommandKey()
		}
		else
		{
			Send("{Blind}{vk43}")
		}
	}

	OnFKeyDown()
	{
		if (this._commandKeyDown)
		{
			this.ReleaseCommandKey()
			this._command.BeginSearch()
			this.PressCommandKey()
		}
		else
		{
			Send("{Blind}{vk46}")
		}
	}

	OnNKeyDown()
	{
		if (this._commandKeyDown)
		{
			this.ReleaseCommandKey()
			if (GetKeyState("Shift"))
			{
				this._command.CreateWindow()
			}
			else
			{
				this._command.CreateFile()
			}
			this.PressCommandKey()
		}
		else
		{
			Send("{Blind}{vk4E}")
		}
	}

	OnOKeyDown()
	{
		if (this._commandKeyDown)
		{
			this.ReleaseCommandKey()
			this._command.Open()
			this.PressCommandKey()
		}
		else
		{
			Send("{Blind}{vk4F}")
		}
	}

	OnVKeyDOwn()
	{
		if (this._commandKeyDown)
		{
			this.ReleaseCommandKey()
			this._command.Paste()
			this.PressCommandKey()
		}
		else {
			Send("{Blind}{vk56}")
		}
	}

	OnXKeyDown()
	{
		if (this._commandKeyDown)
		{
			this.ReleaseCommandKey()
			this._command.Cut()
			this.PressCommandKey()
		}
		else
		{
			Send("{Blind}{vk58}")
		}
	}

	OnZKeyDown()
	{
		if (this._commandKeyDown)
		{
			this.ReleaseCommandKey()
			if (GetKeyState("Shift"))
			{
				this._command.Redo()
			}
			else
			{
				this._command.Undo()
			}
			this.PressCommandKey()
		}
		else {
			Send("{Blind}{vk5A}")
		}
	}
}
