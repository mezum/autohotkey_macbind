; MIT License
; Copyright (c) 2021 Kosaki Mezumona
#UseHook
#include "cmd.ahk2"
#include "key.ahk2"
#include "window.ahk2"

class EmacsSimulator
{
	static Instance[args*]
	{
		get
		{
			static instance := EmacsSimulator()
			return instance
		}
	}

	ToolTipVisibleDuration[args*]
	{
		get => this._toolTipVisibleDuration
		set => this._toolTipVisibleDuration := value
	}

	ChordWaitingDuration[args*]
	{
		get => this._chordWaitingDuration
		set => this._chordWaitingDuration := value
	}

	Command[args*]
	{
		get => this._command
		set => this._command := value
	}

	IgnoredWindowMatcher[args*]
	{
		get => this._ignoredWindowMatcher
		set => this._ignoredWindowMatcher := value
	}

	__New()
	{
		this._currentState := this.ResetState()
		this._lastPushTime := A_NowUTC
		this._toolTipVisibleDuration := 3
		this._chordWaitingDuration := 3
		this._ignoredWindowMatcher := WindowMatcher()
		this._chordCanceller := () => this.CancelChord()
		this._commandPaletteHandler := (command) => this.ExecuteCommand(command)
	}

	RegisterKeyBinds()
	{
		HotIf((*) => this.IsAbleToOverrideKeys())

		HandleInputKey := (key, *) => this.PushKey(key)
		IgnoreInputKey := (*) => ""

		VisitKeys(vk, keyname)
		{
			if (InStr(keyname, "SHIFT") || InStr(keyname, "CTRL") || InStr(keyname, "ALT"))
			{
				return
			}

			if (keyname == "")
			{
				HotKey("<^" . vk, IgnoreInputKey)
				HotKey("+<^" . vk, IgnoreInputKey)
				HotKey("!<^" . vk, IgnoreInputKey)
				HotKey("!+<^" . vk, IgnoreInputKey)
			}
			else
			{
				HotKey("<^" . vk, HandleInputKey.Bind("C-" . keyname))
				HotKey("!<^" . vk, HandleInputKey.Bind("C-M-" . keyname))
				HotKey("+<^" . vk, HandleInputKey.Bind("C-S-" . keyname))
				HotKey("!+<^" . vk, HandleInputKey.Bind("C-M-S-" . keyname))
			}
		}
		VirtualKeyCodes.Visit(VisitKeys)

		HotKey("<^_", HandleInputKey.Bind("C-_"))
		HotKey("!b", HandleInputKey.Bind("M-b"))
		HotKey("!d", HandleInputKey.Bind("M-d"))
		HotKey("!f", HandleInputKey.Bind("M-f"))
		HotKey("!h", HandleInputKey.Bind("M-h"))
		HotKey("!v", HandleInputKey.Bind("M-v"))
		HotKey("!w", HandleInputKey.Bind("M-w"))
		HotKey("!x", HandleInputKey.Bind("M-x"))
		HotKey("!+.", HandleInputKey.Bind("M->"))
		HotKey("!+,", HandleInputKey.Bind("M-<"))

		HotIf()
	}

	IsAbleToOverrideKeys() => !this._ignoredWindowMatcher.MatchActive()

	ResetState()
	{
		this._keyHistory := ""
		this._chordWaiting := false
		this._currentState := this.NextState("Initial")
		return this._currentState
	}

	PushKey(keyname)
	{
		this.ClearToolTip(true)
		this._keyHistory .= keyname . " "
		this._currentState := this._currentState.Call(keyname)
		this._lastPushTime := A_NowUTC
	}

	NextState(stateName) => (keyname) => this.%stateName%(keyname)

	Fallback(keyname)
	{
		this._searching := false

		if (keyname == "C-g")
		{
			this._command.EndSearch()
			this._command.Unselect()
			this._command.PushEscape()
			return this.ResetState()
		}

		SoundPlay(A_WinDir . "\Media\Windows Background.wav")
		ToolTip("The followed key combination is not a command.`n" . this._keyHistory)
		this.RegisterToolTipCleaner(this._toolTipVisibleDuration)
		return this.ResetState()
	}

	Initial(keyname)
	{
		;
		; Move cursor
		;
		if (keyname == "C-f")
		{
			this._command.MoveRight()
			return this.ResetState()
		}

		if (keyname == "C-p")
		{
			this._command.MoveUp()
			return this.ResetState()
		}

		if (keyname == "C-n")
		{
			this._command.MoveDown()
			return this.ResetState()
		}

		if (keyname == "C-b")
		{
			this._command.MoveLeft()
			return this.ResetState()
		}

		if (keyname == "M-f")
		{
			this._command.MoveNextWord()
			return this.ResetState()
		}

		if (keyname == "M-b")
		{
			this._command.MovePrevWord()
			return this.ResetState()
		}

		if (keyname == "C-a")
		{
			this._command.MoveLineHead()
			return this.ResetState()
		}

		if (keyname == "C-e")
		{
			this._command.MoveLineTail()
			return this.ResetState()
		}

		if (keyname == "C-v")
		{
			this._command.MoveNextPage()
			return this.ResetState()
		}

		if (keyname == "M-v")
		{
			this._command.MovePrevPage()
			return this.ResetState()
		}

		if (keyname == "M->")
		{
			this._command.MoveTail()
			return this.ResetState()
		}

		if (keyname == "M-<")
		{
			this._command.MoveHead()
			return this.ResetState()
		}

		;
		; newline
		;
		if (keyname == "C-j")
		{
			this._command.PushEnter()
			return this.ResetState()
		}

		;
		; Delete
		;
		if (keyname == "C-h")
		{
			this._command.DeleteForward()
			return this.ResetState()
		}

		if (keyname == "C-d")
		{
			this._command.DeleteBackward()
			return this.ResetState()
		}

		if (keyname == "M-h")
		{
			this._command.DeleteForwardWord()
			return this.ResetState()
		}

		if (keyname == "M-d")
		{
			this._command.DeleteBackwardWord()
			return this.ResetState()
		}

		;
		; Clipboard
		;
		if (keyname == "M-w")
		{
			this._command.EndSelection()
			this._command.Copy()
			return this.ResetState()
		}

		if (keyname == "C-w")
		{
			this._command.EndSelection()
			this._command.Cut()
			return this.ResetState()
		}

		if (keyname == "C-k")
		{
			this._command.CutLine()
			return this.ResetState()
		}

		if (keyname == "C-y")
		{
			this._command.Paste()
			this._command.EndSelection()
			return this.ResetState()
		}

		;
		; Undo / Redo
		;
		if (keyname == "C-/")
		{
			this._command.Undo()
			return this.ResetState()
		}

		if (keyname == "C-M-/" || keyname == "C-S-/")
		{
			this._command.Redo()
			return this.ResetState()
		}

		if (keyname == "C-u")
		{
			this._command.UndoCursor()
			return this.ResetState()
		}

		; 
		; Region
		;
		if (keyname == "C-SPC")
		{
			this._command.Unselect()
			this._command.BeginSelection()
			return this.ResetState()
		}
		if (keyname == "C-M-n")
		{
			this._command.SelectNextMatch()
			return this.ResetState()
		}
		if (keyname == "C-M-p")
		{
			this._command.SelectPrevMatch()
			return this.ResetState()
		}

		;
		; Search
		;
		if (keyname == "C-s")
		{
			this._command.SearchNext()
			return this.ResetState()
		}

		if (keyname == "C-r")
		{
			this._command.SearchPrev()
			return this.ResetState()
		}

		;
		; Intelligence
		;
		if (keyname == "C-,")
		{
			this._command.Suggest()
			return this.ResetState()
		}
		if (keyname == "C-.")
		{
			this._command.QuickFix()
			return this.ResetState()
		}
		if (keyname == "C-:")
		{
			this._command.ToggleComment()
			return this.ResetState()
		}

		;
		; Chords
		;
		if (keyname == "C-x")
		{
			this._chordWaiting := true
			this.RegisterChordCancellation(this._chordWaitingDuration)
			return this.NextState("HandleCx")
		}

		;
		; Command Palette
		;
		if (keyname == "M-x")
		{
			this._command.ShowCommandPalette(this._commandPaletteHandler)
			return this.ResetState()
		}

		return this.Fallback(keyname)
	}

	HandleCx(keyname)
	{
		;
		; Files
		;
		if (keyname == "C-s")
		{
			this._command.Save()
			return this.ResetState()
		}

		if (keyname == "C-w")
		{
			this._command.SaveAs()
			return this.ResetState()
		}

		if (keyname == "C-f")
		{
			this._command.Open()
			return this.ResetState()
		}
		
		;
		; Create
		;
		if (keyname == "C-n")
		{
			this._command.CreateWindow()
			return this.ResetState()
		}

		if (keyname == "C-b")
		{
			this._command.CreateTab()
			return this.ResetState()
		}

		;
		; Close
		;
		if (keyname == "C-k")
		{
			this._command.CloseTab()
			return this.ResetState()
		}

		if (keyname == "C-c")
		{
			this._command.CloseWindow()
			return this.ResetState()
		}

		return this.Fallback(keyname)
	}

	ExecuteCommand(command)
	{
		if (command == "undo")
		{
			this._command.Undo()
			return
		}
		if (command == "redo")
		{
			this._command.Redo()
			return
		}

		ToolTip("Unknown command: '" . command . "'")
		this.RegisterToolTipCleaner(this._toolTipVisibleDuration)
	}

	RegisterChordCancellation(interval)
	{
		SetTimer(this._chordCanceller, interval * -1000)
	}

	CancelChord()
	{
		elapsed := EmacsSimulator.GetElapsedSeconds(this._lastPushTime)
		if (!this._chordWaiting || elapsed < this._chordWaitingDuration)
		{
			this.RegisterChordCancellation(this._chordWaitingDuration - elapsed)
			return
		}
		
		ToolTip("'" . this._keyHistory . "' is timeout.")
		this.RegisterToolTipCleaner(this._toolTipVisibleDuration)
		this.ResetState()
	}

	RegisterToolTipCleaner(interval)
	{
		ClearToolTip := () => this.ClearToolTip(false)
		SetTimer(ClearToolTip, -interval * 1000)
	}

	ClearToolTip(forced := false)
	{
		elapsed := EmacsSimulator.GetElapsedSeconds(this._lastPushTime)
		if (!forced && elapsed < this._toolTipVisibleDuration)
		{
			return
		}
		ToolTip()
	}

	static GetElapsedSeconds(t)
	{
		return A_NowUTC - t
	}
}
