; MIT License
; Copyright (c) 2021 Kosaki Mezumona
class VirtualKeyCodes
{
	static _KeyNames := [
		; "",
		"", "", "", "", "", "", "", "BS", "TAB", "", "", "", "RET", "", "",
		"SHIFT", "CTRL", "ALT", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"SPC", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "", "", "", "", "", "",
		"", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o",
		"p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "F10", "F11", "F12", "F13", "F14", "F15", "F16",
		"F17", "F18", "F19", "F20", "F21", "F22", "F23", "F24", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"LSHIFT", "RSHIFT", "LCTRL", "RCTRL", "LALT", "RALT", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", ":", "+", ",", "-", ".", "/",
		"~", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "[", "\", "]", "'", "",
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		; "",
	]

	static Visit(visitor)
	{
		for i, keyname in VirtualKeyCodes._KeyNames
		{
			hex_10 := (i >> 4) & 0xf
			hex_01 := i & 0xf
			vk := "vk"
			vk .= hex_10 >= 10 ? Chr(0x41 - 10 + hex_10) : hex_10
			vk .= hex_01 >= 10 ? Chr(0x41 - 10 + hex_01) : hex_01
			visitor.Call(vk, keyname)
		}
	}

	static VKToKeyName(keyname)
	{
		vkPos := InStr(keyname, "vk")
		if (vkPos <= 0)
		{
			return ""
		}
		hex_01 := Ord(SubStr(keyname, vkPos + 3, 1))
		hex_10 := Ord(SubStr(keyname, vkPos + 2, 1))
		hex_01 := hex_01 >= 0x41 ? hex_01 - 0x40 + 10 : hex_01 - 0x30
		hex_10 := hex_10 >= 0x41 ? hex_10 - 0x40 + 10 : hex_10 - 0x30
		return VirtualKeyCodes._KeyNames[hex_10 * 16 + hex_01]
	}
}
