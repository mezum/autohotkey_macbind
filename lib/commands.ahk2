; MIT License
; Copyright (c) 2021 Kosaki Mezumona
class Commands
{
	static PushEnter()
	{
		Send("{Enter}")
	}

	static StartSelection()
	{
		Send("{Shift Down}")
	}

	static EndSelection()
	{
		Send("{Shift Up}")
	}

	static Unselect()
	{
		Send("{Escape}")
	}

	static DeleteForward()
	{
		Send("{BS}")
	}

	static DeleteBackward()
	{
		Send("{Del}")
	}

	static MoveUp()
	{
		Send("{Up}")
	}

	static MoveRight()
	{
		Send("{Right}")
	}

	static MoveDown()
	{
		Send("{Down}")
	}

	static MoveLeft()
	{
		Send("{Left}")
	}

	static MoveHead()
	{
		Send("{Home}")
	}

	static MoveTail()
	{
		Send("{End}")
	}

	static MoveNextPage()
	{
		Send("{PgDn}")
	}

	static MovePrevPage()
	{
		Send("{PgUp}")
	}

	static CopyClipBoard()
	{
		Send("^c")
	}

	static CutClipBoard()
	{
		Send("^x")
	}

	static PasteClipBoard()
	{
		Send("^v")
	}

	static SaveFile()
	{
		Send("^s")
	}

	static SaveFileAs()
	{
		Send("+^s")
	}

	static OpenFile()
	{
		Send("^o")
	}

	static SwitchNextTab()
	{
		Send("^{Tab}")
	}

	static SwitchPrevTab()
	{
		Send("^+{Tab}")
	}

	static CloseTab()
	{
		Send("^w")
	}

	static CloseWindow()
	{
		Send("!{F4}")
	}

	static Undo()
	{
		Send("^z")
	}

	static Redo()
	{
		Send("^+z")
	}

	static CaptureScreen()
	{
		Loop (MonitorGetCount())
		{
			MonitorGet(A_Index, left, top, right, bottom)
			Commands.CaptureScreenRect(
				left,
				top,
				right - left,
				bottom - top,
				Commands.GenerateScreenShotFilePath("-" . A_Index)
			)
		}
	}

	static CaptureActiveWindow()
	{
		activeWindow := WinExist("A")
		winGetClientPos(x, y, w, h, activeWindow)
		Commands.CaptureScreenRect(x, y, w, h, Commands.GenerateScreenShotFilePath(""))
		WinSetTransparent(204, activeWindow)
		SetTimer((*) => WinSetTransparent("Off", activeWindow), -100)
	}

	static CaptureScreenRect(x, y, w, h, path)
	{
		Commands.ExecutePowerShellCommand(
			'Add-Type -Assembly System.Drawing;' .
			'$b=[System.Drawing.Bitmap]::new(' . w . ',' . h . ');' .
			'$g=[System.Drawing.Graphics]::FromImage($b);' .
			'$g.CopyFromScreen(' . x . ',' . y . ',0,0,$b.Size);' .
			'$g.Dispose();' .
			"$b.Save('" . path . "',[System.Drawing.Imaging.ImageFormat]::Png)",
			Commands.LibFolderPath
		)
	}

	static ShowScreenShotTool()
	{
		A_Clipboard := ""
		RunWait("explorer.exe ms-screenclip:")
		pid := ProcessWait("ScreenClippingHost.exe", 5.0)
		if (pid == 0)
		{
			return
		}
		ProcessWaitClose(pid)

		path := Commands.GenerateScreenShotFilePath("")
		Commands.ExecutePowerShellCommand(
			'Add-Type -Assembly System.Drawing;' .
			'Add-Type -Assembly System.Windows.Forms;' .
			"$b=[System.Windows.Forms.Clipboard]::GetImage()`n" .
			'if ($b -ne $null) {' .
				"$b.Save('" . path . "',[System.Drawing.Imaging.ImageFormat]::Png)" .
			'}',
			Commands.LibFolderPath
		)
	}

	static GenerateScreenShotFilePath(suffix)
	{
		DirCreate(Commands.ScreenShotPath)
		return (
			Commands.ScreenShotPath . "\" .
			A_YYYY . "_" .
			A_MM . "_" .
			A_DD . "-" .
			A_Hour . "_" .
			A_Min . "_" .
			A_Sec . "_" .
			A_MSec .
			suffix .
			".png"
		)
	}

	static LibFolderPath[]
	{
		get
		{
			SplitPath(A_LineFile, , dir)
			return dir
		}
	}

	static ScreenShotPath[]
	{
		get => Commands.PicturesPath . "\ScreenShots"
	}

	static DesktopPath[]
	{
		get => Commands.GetCommonDirPath(0x10)
	}

	static DocumentsPath[]
	{
		get => Commands.GetCommonDirPath(0x05)
	}

	static PicturesPath[]
	{
		get => Commands.GetCommonDirPath(0x27)
	}

	static MusicPath[]
	{
		get => Commands.GetCommonDirPath(0x0d)
	}

	static VideoPath[]
	{
		get => Commands.GetCommonDirPath(0x0e)
	}

	static GetCommonDirPath(csidl)
	{
		VarSetStrCapacity(path, 512)
		DllCall("shell32\SHGetFolderPathW", "Ptr", 0, "Int", csidl, "Ptr", 0, "Int", 0, "WStr", path, "HRESULT")
		VarSetStrCapacity(path, -1)
		return path
	}

	static ShowCommandPallet(callback)
	{
		commandPallet := Gui.New("AlwaysOnTop -Caption -SysMenu", "AHK Command Palllet")

		commandInput := commandPallet.AddEdit("W256 H24 X0 Y0 -WantReturn")
		commandInput.SetFont("S14")

		submitButton := commandPallet.AddButton("Default W24 H24 X256 Y0", "Exec")

		OnEscaped(*)
		{
			commandPallet.Destroy()
		}
		OnLoseFocus(*)
		{
			commandPallet.Destroy()
		}
		OnSubmited(*)
		{
			SetTimer(callback.Bind(commandInput.Value), -16)
			commandPallet.Destroy()
		}
		commandPallet.OnEvent("Escape", Func("OnEscaped"))
		commandInput.OnEvent("LoseFocus", Func("OnLoseFocus"))
		submitButton.OnEvent("Click", Func("OnSubmited"))

		commandPallet.Show("W256 H24 Center")
	}

	static ExecutePowerShellCommand(command, workingDir)
	{
		scriptPath := A_Temp . Format("\ahk_{:X}.txt", Random())
		scriptFile := FileOpen(scriptPath, "w", "UTF-8")
		scriptFile.Write(command)
		scriptFile.Close()
		result := RunWait(
			(
				"powershell.exe -ExecutionPolicy Bypass -WindowStyle Hidden -Command `"cat -Raw '" .
				scriptPath .
				"'|iex`""
			),
			workingDir,
			"Hide"
		)
		; FileDelete(scriptPath)
		return result
	}
}
